@page "/forgotPW"

@attribute [AllowAnonymous]

@layout LoginLayout
@using MiasHR.Models.DTOs
@using Microsoft.AspNetCore.Components
@using MiasHR.Web.Services.Contracts
@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject ISessionStorageService SessionStorage

<PageTitle>Forgot Password</PageTitle>

<MudPaper Class="pa-5 m-5">
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" @onkeydown="@Enter">
        @*Check *@
        <MudTextField T="string" Label="User Email" HelperText="Use your Company Email" @bind-Value="userInfo.Username"
                      InputType="InputType.Email" Validation="@(new Func<string, IEnumerable<string>>(EmailValidation))" Required="true"
                      RequiredError="Type your Company Email!" />
        <MudTextField T="DateTime" Format="yyyy-MM-dd" Label="Birth Date" InputType="InputType.Date" Required="true" @bind-Value="birth"
                      RequiredError="Type your Birth Date!" />

        <div class="d-flex m-2 align-center justify-space-between">
            <MudButton OnClick="CheckUserExist" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Validate</MudButton>
        </div>
    </MudForm>

</MudPaper>

@code {
    private UserCheckDTO userInfo = new UserCheckDTO();
    bool success;
    string[] errors = { };
    DateTime birth = DateTime.Today;
    MudForm? form;

    //Check if user exists
    private async Task CheckUserExist()
    {
        try
        {
            userInfo.Birthdate = DateOnly.FromDateTime(birth);
            var result = await AuthService.GetUserExist(userInfo);

            // Getting result message stored to show in snackbar
            if (string.Equals(result?.msg, "success", StringComparison.OrdinalIgnoreCase))
            {
                NavigationManager.NavigateTo("/changePW");
                Snackbar.Add("USER FOUND. PLEASE CHANGE YOUR PASSWORD.");
            }
            else
            {
                Snackbar.Add(result?.msg);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex.Message}");
            Snackbar.Add("An error occurred during registration.");
        }
    }

    private IEnumerable<string> EmailValidation(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            yield return "Email is required!";
            yield break;
        }

        // Check if the email contains "@miasfashion.com" or "@tjgiant.com"
        if (!email.EndsWith("@miasfashion.com", StringComparison.OrdinalIgnoreCase) && !email.EndsWith("@tjgiant.com", StringComparison.OrdinalIgnoreCase))
        {
            yield return "Email must be from @miasfashion.com or @tjgiant.com domain";
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (form.IsValid)
        {
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                try
                {
                    CheckUserExist();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during user validation: {ex.Message}");
                    Snackbar.Add("An error occurred during user validation.");
                }
            }
        }
    }
}