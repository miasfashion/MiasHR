@page "/forgotpassword"

@attribute [AllowAnonymous]

@layout LoginLayout

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject ISessionStorageService SessionStorage

<PageTitle>Forgot Password</PageTitle>

<MudPaper Class="d-flex flex-column pa-5 ma-5 justify-center align-center" MinHeight="350px" MinWidth="340px">
    <MudPaper Class="d-flex justify-center align-content-center my-8" Elevation="0">
        <MudImage Width="236" Height="100" Src="images/mfm_mias_logo.jpg" />
    </MudPaper>
    <MudForm @ref="form" @bind-IsValid="@_formIsValid" @bind-Errors="@errors" @onkeydown="@Enter">
        @*Check *@
        <MudTextField T="string" Label="User Email" HelperText="Use your Company Email" @bind-Value="userInfo.Username"
                      InputType="InputType.Email" Validation="@(new Func<string, IEnumerable<string>>(EmailValidation))" Required="true"
                      RequiredError="Type your Company Email!" />
        <MudDatePicker Label="Birth Date" Required="true" Editable="true" @bind-Date="birth" RequiredError="Type your Birth Date!" />

        <MudPaper Class="d-flex align-center justify-space-between my-4" Elevation="0">
            <MudButton OnClick='()=>NavigationManager.NavigateTo("/Login")' EndIcon="@Icons.Material.Filled.Home">Home</MudButton>
            <MudButton OnClick="CheckUserExist" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formIsValid || _processing)">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Validate</MudText>
                }
            </MudButton>
        </MudPaper>
    </MudForm>
</MudPaper>

@code {
    private UserCheckDTO userInfo = new UserCheckDTO();

    private bool _formIsValid = false;
    private bool _processing = false;

    string[] errors = { };
    DateTime? birth = DateTime.Today;
    MudForm? form;


    //Check if user exists
    private async Task CheckUserExist()
    {
        _processing = true;

        try
        {
            userInfo.Birthdate = DateOnly.FromDateTime(birth.Value);
            var result = await AuthService.GetUserExist(userInfo);

            _processing = false;

            // Getting result message stored to show in snackbar
            if (string.Equals(result?.msg, "success", StringComparison.OrdinalIgnoreCase))
            {
                NavigationManager.NavigateTo("/changepassword");
                Snackbar.Add("USER FOUND. PLEASE CHANGE YOUR PASSWORD.", Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = false;
                });
            }
            else
            {
                Snackbar.Add(result?.msg, Severity.Warning, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
            }
        }
        catch (Exception ex)
        {
            _processing = false;

           Snackbar.Add($"An error occurred while verifying user.: {ex.Message}", Severity.Warning, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
        }
    }

    private IEnumerable<string> EmailValidation(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            yield return "Email is required!";
            yield break;
        }

        // Check if the email contains "@miasfashion.com" or "@tjgiant.com"
        if (!email.EndsWith("@miasfashion.com", StringComparison.OrdinalIgnoreCase) && !email.EndsWith("@tjgiant.com", StringComparison.OrdinalIgnoreCase))
        {
            yield return "Email must be from @miasfashion.com or @tjgiant.com domain";
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (form.IsValid)
        {
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                try
                {
                    CheckUserExist();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during user validation: {ex.Message}");
                    Snackbar.Add("An error occurred during user validation.", Severity.Warning, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
                }
            }
        }
    }
}