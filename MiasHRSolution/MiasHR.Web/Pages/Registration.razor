@page "/registration"

@attribute [AllowAnonymous]

@layout LoginLayout
@using MiasHR.Models.DTOs
@using Microsoft.AspNetCore.Components
@using MiasHR.Web.Services.Contracts;
@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<PageTitle>Register new account</PageTitle>

<MudPaper Class="pa-5 m-5">
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" @onkeydown="@Enter">
        @*Check *@
        <MudTextField T="string" Label="User Email" HelperText="Use your Company Email" @bind-Value="userCredentials.Username"
                      InputType="@emailInput" Validation="@(new Func<string, IEnumerable<string>>(EmailValidation))" Required="true"
                      RequiredError="Type your Company Email!" />
        <MudPaper Class="d-flex" Elevation="0">
            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="userCredentials.Password"
                          InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="PWVisibilityClick" AdornmentAriaLabel="Check Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Type your Password!" />
            <MudIconButton Size="Size.Small" Class="ml-3" OnClick="@ToggleTip" Icon="@Icons.Material.Filled.QuestionMark" />
        </MudPaper>
        <MudTextField T="DateTime" Format="yyyy-MM-dd" Label="Birth Date" InputType="InputType.Date" Required="true" @bind-Value="birth"
                      RequiredError="Type your Birth Date!" />
        <div class="d-flex m-2 align-center justify-space-between">
            <MudButton OnClick="HandleRegist" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
        </div>
    </MudForm>
    @*To Show Requirements for strong password*@
    <MudPopover AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft" Open="@_isOpen" Fixed="true" Class="d-flex m-5 px-4 pt-4">
        <div class="d-flex flex-column">
            <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must be at least of length 8" />
            <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must contain at least one capital letter" />
            <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must contain at least one lowercase letter" />
            <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must contain at least one digit" />
            <MudButton OnClick="@ToggleTip" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
        </div>
    </MudPopover>
</MudPaper>

@code {
    private UserDTO userCredentials = new UserDTO();
    bool success;
    string[] errors = { };
    DateTime birth;
    MudForm? form;

    // Password Visibility Section
    bool isShow;
    InputType emailInput = InputType.Email;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    //Checking PW visibility
    void PWVisibilityClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private IEnumerable<string> EmailValidation(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            yield return "Email is required!";
            yield break;
        }

        // Check if the email contains "@miasfashion.com" or "@tjgiant.com"
        if (!email.EndsWith("@miasfashion.com", StringComparison.OrdinalIgnoreCase) && !email.EndsWith("@tjgiant.com", StringComparison.OrdinalIgnoreCase))
        {
            yield return "Email must be from @miasfashion.com or @tjgiant.com domain";
        }
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    // Toggle Pop Over Setting for Tool Tip
    public bool _isOpen;

    public void ToggleTip()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    // Register new user
    private async Task HandleRegist()
    {
        try
        {
            DateOnly birthDate = DateOnly.FromDateTime(birth);
            var result = await AuthService.Register(userCredentials, birthDate);

            // Getting result message stored to show in snackbar
            string msg = await result.Content.ReadAsStringAsync();
            if (result.IsSuccessStatusCode && string.Equals(msg, "success", StringComparison.OrdinalIgnoreCase))
            {
                NavigationManager.NavigateTo("/");
                Snackbar.Add("Account has been successfully created.", Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
            }
            else
            {
                Snackbar.Add(msg, Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex.Message}");
            Snackbar.Add("An error occurred during registration.", Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (form.IsValid)
        {
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                try
                {
                    HandleRegist();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error during user validation: {ex.Message}");
                    Snackbar.Add("An error occurred during user validation.", Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
                }
            }
        }
    }
}