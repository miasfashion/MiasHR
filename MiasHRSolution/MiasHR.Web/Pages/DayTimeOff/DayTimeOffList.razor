@page "/daytimeoff/list"

@attribute [Authorize]

@using MiasHR.Models.DTOs
@using Microsoft.AspNetCore.Components
@using MiasHR.Web.Services.Contracts
@using System.Text.RegularExpressions
@using System.Globalization
@inject IJSRuntime JSRuntime


@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IAuthService AuthService
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject ISnackbar Snackbar

<PageTitle>Day Time Off Requests</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudPaper Class="d-flex px-8 justify-space-between align-items-center flex-grow-1" Elevation="0">
        <MudText Class="ml-2" Typo="Typo.h4">Day Time Off Request List</MudText>
        <MudButton OnClick="Request" Variant="Variant.Filled" Color="Color.Secondary"
                   Style="width: 200px; height: 60px;">
            Request Time Off
        </MudButton>
    </MudPaper>
    <MudPaper Class="d-block" Elevation="0">
        <MudTable Filter="new Func<DayTimeOffRequestDTO,bool>(FilterFunc1)" Class="m-4 flex-grow-1 gap-4" Items="@TimeOffLists">
            <ToolBarContent>
                <MudSpacer />
                <MudSelect Class="mt-0 mx-4" T="string" @bind-Value="@selectedYear" @bind-Value:after=@HandleYearInput>
                    @foreach (var yr in years)
                    {
                        <MudSelectItem Value="@yr">@yr</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Class="mt-0 mx-4" @bind-Value="searchString1" Placeholder="Search by name or request type" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col style="width: 60px;"/>
                <col style="width: 60px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<DayTimeOffRequestDTO, object>(x=>x.ReqDate)">Requested Date</MudTableSortLabel></MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Used Days</MudTh>
                <MudTh>Remark</MudTh>
                <MudTh>From</MudTh>
                <MudTh>To</MudTh>
                <MudTh Style="text-align:center">1st Approved</MudTh>
                <MudTh Style="text-align:center">2nd Approved</MudTh>
                <MudTh Style="text-align:center">Status</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                @if (@context.Status != 3 && context.Status != 0)
                {
                    <MudTd DataLabel="Date">@DateTime.ParseExact(@context.ReqDate, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                    <MudTd DataLabel="Type">@context.ReqType</MudTd>
                    <MudTd DataLabel="UsedDays">@context.DaysCnt</MudTd>
                    <MudTd DataLabel="Remark">@context.ReqSubType</MudTd>
                    <MudTd DataLabel="From">@DateTime.ParseExact(@context.PeriodFrom, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                    <MudTd DataLabel="To">@DateTime.ParseExact(@context.PeriodTo, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                    <MudTd DataLabel="1st Approved" Style="text-align:center">@RenderApprovalIcon(context.Approve1stYn)</MudTd>
                    <MudTd DataLabel="2nd Approved" Style="text-align:center">@RenderApprovalIcon(context.Approve2ndYn)</MudTd>
                    <MudTd DataLabel="Status" Style="text-align:center">@RenderStatusChip(context.Status, context.Approve1stYn, context.Approve2ndYn)</MudTd>
                    <MudTd Style="text-align:center">@RenderActionButton1(context.Status, context.Approve1stYn, context.Approve2ndYn, context.Seq)</MudTd>
                    <MudTd Style="text-align:center">@RenderActionButton2(context.Status, context.Approve1stYn, context.Approve2ndYn, context.Seq)</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

<MudDialog IsVisible="@showConfirmationDialog">
    <DialogContent>
        Are you sure you want to cancel?
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ConfirmCancellation">Yes</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => showConfirmationDialog = false)">No</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private IReadOnlyList<DayTimeOffRequestDTO>? TimeOffLists;
    private string selectedYear = DateTime.Now.Year.ToString();

    string? employee;
    List<string> years;


    private bool showConfirmationDialog = false;
    private int requestIdToDelete = 0;

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Request List", href: null, disabled: true)
    };

    //When the page loads, it will be displaying data accordingly. Default year will be current year.
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        int currentYear = DateTime.Now.Year;
        years = new List<string>();
        for (int y = 2020; y <= currentYear; y++)
        {
            years.Add(y.ToString());
        }
        employee = await AuthService.GetUserEmplCode();
        TimeOffLists = await DayTimeOffRequestService.GetAllEmployeeDayTimeOffRequestList(employee, selectedYear);


        //Instead of refreshing whole page, just render values again
        StateHasChanged();

    }

    //Warning if user tries to cancel approved one
    private async void HandleApprove()
    {
        await DialogService.ShowMessageBox(
            "Warning!",
            "Your request has been approved already.\nPlease contact HR at hr@miasfashion.com");
    }

    //Used to set Dialog 
    private void HandleCancelConfirmation(int id)
    {
        requestIdToDelete = id;
        showConfirmationDialog = true;
    }

    /// <summary>
    /// When user confirms cancellation, cancel the request and close dialog
    /// </summary>
    private async Task ConfirmCancellation()
    {
        try
        {
            var empl = await AuthService.GetUserEmplCode();
            var result = await DayTimeOffRequestService.CancelDayTimeOffRequest(requestIdToDelete, empl);

            string? message = await result.Content.ReadAsStringAsync();

            if (message == "Canceled Successfully !")
            {
                Snackbar.Add("Canceled Successfully !", Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
                await OnInitializedAsync(); // Refresh the data
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during cancellation: {ex.Message}");
            Snackbar.Add("An error occurred during cancellation.", Severity.Normal, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
        }
        finally
        {
            showConfirmationDialog = false; // Close the confirmation dialog
        }
    }


    /// <summary>
    /// Handles the input of the selected year to retrieve the Day Time Off (DTO) history of the user for the year.
    /// </summary>
    private async Task HandleYearInput()
    {
        try
        {
            //employee = await AuthService.GetUserEmplCode(); Already called during Init
            TimeOffLists = await DayTimeOffRequestService.GetAllEmployeeDayTimeOffRequestList(employee, selectedYear);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    // Navigation Tab
    int activeIndex = 1;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/daytimeoff/info");
        }
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/daytimeoff/list");
        }
    }

    //Toggles when user clicks Create Request
    private async void Request()
    {
        var parameters = new DialogParameters<DayTimeOffRequest>();
        parameters.Add(x => x.ContentText, "New Time Off Request");
        parameters.Add(x => x.ButtonText, "Confirm");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = DialogService.Show<DayTimeOffRequest>("New Time Off Request", parameters, options);

        //Wait for the dialog to close
        var result = await dialog.Result;

        //Render again if Dialog was not cancelled
        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }

    }

    //Toggles when user clicks Edit Button
    private async void HandleEdit(int id)
    {
        var parameters = new DialogParameters<DayTimeOffEdit>();
        parameters.Add(x => x.ContentText, "Edit Time Off Request");
        parameters.Add(x => x.ButtonText, "Confirm Edit");
        parameters.Add(x => x.Color, Color.Success);
        parameters.Add(x => x.seq, id);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = DialogService.Show<DayTimeOffEdit>("Edit Time Off Request", parameters, options);

        //Wait for the dialog to close
        var result = await dialog.Result;

        //Render again if Dialog was not cancelled
        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }

    // handle table search by employee name and request type
    private string searchString1 = "";

    private bool FilterFunc1(DayTimeOffRequestDTO history) => FilterFunc(history, searchString1);

    private bool FilterFunc(DayTimeOffRequestDTO history, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (history.ReqType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (history.ReqSubType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(history.ReqDate, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(history.PeriodFrom, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(history.PeriodTo, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private RenderFragment RenderApprovalIcon(string approvalProperty)
    {
        bool isApproved = approvalProperty.Equals("Y");
        string icon = isApproved ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RemoveCircle;
        Color color = isApproved ? Color.Primary : Color.Secondary;

        return@<MudIcon Icon="@icon" Color="@color" />;
    }

    private RenderFragment RenderStatusChip(int status, string approve1stYn, string approve2ndYn)
    {
        bool chipDisabled;
        Color chipColor;
        string chipText;

        if (status == 1 && approve1stYn.Equals("N") && approve2ndYn.Equals("N"))
        {
            chipDisabled = false;
            chipColor = Color.Info;
            chipText = "Open";
        }
        else if (status == 4)
        {
            chipDisabled = true;
            chipColor = Color.Primary;
            chipText = "Rejected";
        }
        else if (status == 2)
        {
            chipDisabled = true;
            chipColor = Color.Success;
            chipText = "Approved";
        }
        else if (status == 1)
        {
            chipDisabled = true;
            chipColor = Color.Warning;
            chipText = "Partially Approved";
        }
        else
        {
            return null;
        }

        return@<MudChip Disabled=chipDisabled Color=chipColor>@chipText</MudChip>;
    }

    private RenderFragment RenderActionButton1(int status, string approve1stYn, string approve2ndYn, int seq)
    {
        if (status == 1)
        {
            if (approve1stYn.Equals("N") && approve2ndYn.Equals("N"))
            {
                return @<MudButton EndIcon="@Icons.Material.Filled.Edit" OnClick="@(() => HandleEdit(seq))"></MudButton>;
            }
            else
            {
                return @<MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="HandleApprove"></MudButton>;
            }
        }
        else if (status == 2)
        {
            return@<MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="HandleApprove"></MudButton>;
        }
        else
        {
            return null;
        }
    }

    private RenderFragment RenderActionButton2(int status, string approve1stYn, string approve2ndYn, int seq)
    {
        if (status == 1 && approve1stYn.Equals("N") && approve2ndYn.Equals("N"))
        {
            return@<MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="@(() => HandleCancelConfirmation(seq))"></MudButton>;
        }
        else
        {
            return null;
        }
    }
}