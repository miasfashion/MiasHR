@page "/daytimeoff/list"

@attribute [Authorize]

@using MiasHR.Models.DTOs
@using Microsoft.AspNetCore.Components
@using MiasHR.Web.Services.Contracts
@using System.Text.RegularExpressions   
@using System.Globalization

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IAuthService AuthService
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject ISnackbar Snackbar


<PageTitle>Day Time Off Requests</PageTitle>
<MudStack Row="true">
    <MudBreadcrumbs Items="_breadcrumbs" Class="justify-start" />
    <MudSpacer />
    <MudButton OnClick="Request" Variant="Variant.Filled" Color="Color.Secondary"
               Style="width: 200px; height: 60px;">
        Request Time Off
    </MudButton>
</MudStack>
<MudContainer Class="d-block">
    <MudContainer Class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudPaper Elevation=0 MinWidth="195px"> </MudPaper>
        </MudHidden>
        <MudText Class="ml-2" Typo="Typo.h4">Day Time Off Request List</MudText>
    </MudContainer>
    <MudContainer Class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudPaper Elevation="0">
                <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="false"
                @bind-ActivePanelIndex="activeIndex" Style="position:sticky; top: 120px;" Class="ma-4">
                    <MudTabPanel OnClick="navPage" Text="Information" />
                    <MudTabPanel OnClick="navPage" Text="Request List" />
                </MudTabs>
            </MudPaper>

        </MudHidden> 
              
        <MudPaper Class="d-block" Elevation="0" >
            <MudTextField @bind-Value="@year" Class="mt-2" Style="width: 200px;" Label="Year" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" OnAdornmentClick="@HandleYearInput" />

                <MudTable Class="m-4 flex-grow-1" Items="@TimeOffLists">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<DayTimeOffRequestDTO, object>(x=>x.ReqDate)">Requested Date</MudTableSortLabel></MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Used Days</MudTh>
                        <MudTh>Remark</MudTh>
                        <MudTh>From</MudTh>
                        <MudTh>To</MudTh>
                        <MudTh>1st Approved</MudTh>
                        <MudTh>2nd Approved</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @if(@context.Status != 3 && context.Status != 0)
                        {                        
                        <MudTd DataLabel="Date">@DateTime.ParseExact(@context.ReqDate, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                        <MudTd DataLabel="Type">@context.ReqType</MudTd>
                        <MudTd DataLabel="UsedDays">@context.DaysCnt</MudTd>
                        <MudTd DataLabel="Remark">@context.ReqContent</MudTd>
                        <MudTd DataLabel="From">@DateTime.ParseExact(@context.PeriodFrom, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                        <MudTd DataLabel="To">@DateTime.ParseExact(@context.PeriodTo, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                        <MudTd DataLabel="Approve1st">@context.Approve1stYn</MudTd>
                        <MudTd DataLabel="Approve2nd">@context.Approve2ndYn</MudTd>
                        <MudTd>
                                @if (@context.Status == 1)
                            {
                                <MudChip Color="Color.Info">Open</MudChip>
                                <MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="@(() => HandleCancel(context.Seq))" />
                            }
                            else if (@context.Status == 4)
                            {
                                <MudChip Disabled="true" Color="Color.Error">Rejected</MudChip>
                            }
                            else if (@context.Status == 2)
                            {
                                <MudChip Disabled="true">Approved</MudChip>
                            }
                        </MudTd>
                        }
                    </RowTemplate>
                </MudTable>
            </MudPaper>
    </MudContainer>

</MudContainer>
@code {

    private IReadOnlyList<DayTimeOffRequestDTO>? TimeOffLists;
    string? employee;
    string? year = DateTime.Now.Year.ToString();

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Request List", href: null, disabled: true)
    };

    //When the page loads, it will be displaying data accordingly. Default year will be current year.
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        employee = await AuthService.GetUserEmplCode();
        TimeOffLists = await DayTimeOffRequestService.GetAllEmployeeDayTimeOffRequestList(employee, year);
    }
    
    //Change status of D.T.O Request to Cancel
    private async Task HandleCancel(int id)
    {
        try
        {
            var empl = await AuthService.GetUserEmplCode();
            var result = await DayTimeOffRequestService.CancelDayTimeOffRequest(id, empl);

            string? message = await result.Content.ReadAsStringAsync();

            if (message == "Canceled Successfully !")
            {
                Snackbar.Add("Canceled Successfully !");
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex.Message}");
            Snackbar.Add("An error occurred during registration.");
        }

    }

    //When user search year, it will pull D.T.O. History of user for the year. 
    private async Task HandleYearInput()
    {
        try
        {
            //employee = await AuthService.GetUserEmplCode(); Already called during Init
            TimeOffLists = await DayTimeOffRequestService.GetAllEmployeeDayTimeOffRequestList(employee, year);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    // Navigation Tab
    int activeIndex = 1;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/daytimeoff/info");
        }
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/daytimeoff/list");
        }
    }

    //DayTimeOff Request
    private void Request()
    {
        var parameters = new DialogParameters<DayTimeOffRequest>();
        parameters.Add(x => x.ContentText, "New Time Off Request");
        parameters.Add(x => x.ButtonText, "Confirm");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        DialogService.Show<DayTimeOffRequest>("New Time Off Request", parameters, options);
    }
}
