@page "/daytimeoff/list"

@attribute [Authorize]

@using MiasHR.Models.DTOs
@using Microsoft.AspNetCore.Components
@using MiasHR.Web.Services.Contracts
@using System.Text.RegularExpressions
@using System.Globalization
@inject IJSRuntime JSRuntime


@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IAuthService AuthService
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject ISnackbar Snackbar
@inject IEmailService EmailService

<PageTitle>Day Time Off Requests</PageTitle>
<MudStack Row="true">
    <MudBreadcrumbs Items="_breadcrumbs" Class="justify-start" />
    <MudSpacer />
    <MudButton OnClick="Request" Variant="Variant.Filled" Color="Color.Secondary"
               Style="width: 200px; height: 60px;">
        Request Time Off
    </MudButton>
</MudStack>
<MudContainer Class="d-block">
    <MudContainer Class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudPaper Elevation=0 MinWidth="195px"> </MudPaper>
        </MudHidden>
        <MudText Class="ml-2" Typo="Typo.h4">Day Time Off Request List</MudText>
    </MudContainer>
    <MudContainer Class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudPaper Elevation="0">
                <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="false"
                         @bind-ActivePanelIndex="activeIndex" Style="position:sticky; top: 120px;" Class="ma-4">
                    <MudTabPanel OnClick="navPage" Text="Information" />
                    <MudTabPanel OnClick="navPage" Text="Request List" />
                </MudTabs>
            </MudPaper>

        </MudHidden>

        <MudPaper Class="d-block" Elevation="0">
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect T="string" Label="Select Year" @bind-Value="@selectedYear" @bind-Value:after=@HandleYearInput>
                        @foreach (var yr in years)
                        {
                            <MudSelectItem Value="@yr">@yr</MudSelectItem>
                        }

                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudTable Class="m-4 flex-grow-1" Items="@TimeOffLists">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<DayTimeOffRequestDTO, object>(x=>x.ReqDate)">Requested Date</MudTableSortLabel></MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Used Days</MudTh>
                    <MudTh>Remark</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>1st Approved</MudTh>
                    <MudTh>2nd Approved</MudTh>
                    <MudTh>Status</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (@context.Status != 3 && context.Status != 0)
                    {
                        <MudTd DataLabel="Date">@DateTime.ParseExact(@context.ReqDate, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                        <MudTd DataLabel="Type">@context.ReqType</MudTd>
                        <MudTd DataLabel="UsedDays">@context.DaysCnt</MudTd>
                        <MudTd DataLabel="Remark">@context.ReqSubType</MudTd>
                        <MudTd DataLabel="From">@DateTime.ParseExact(@context.PeriodFrom, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                        <MudTd DataLabel="To">@DateTime.ParseExact(@context.PeriodTo, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("yyyy/MM/dd")</MudTd>
                        <MudTd DataLabel="Approve1st">@context.Approve1stYn</MudTd>
                        <MudTd DataLabel="Approve2nd">@context.Approve2ndYn</MudTd>
                        @if (@context.Status == 1 && context.Approve1stYn.Equals("N") && context.Approve2ndYn.Equals("N"))
                        {
                            <MudTd>
                                <MudChip Color="Color.Info">Open</MudChip>
                            </MudTd>
                            <MudTd>
                                <MudButton EndIcon="@Icons.Material.Filled.Edit" OnClick="@(() => HandleEdit(context.Seq))" />
                            </MudTd>
                            <MudTd>
                                <MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="@(() => HandleCancelConfirmation(context.Seq))" />
                            </MudTd>
                        }
                        else if (@context.Status == 4)
                        {
                            <MudTd>
                                <MudChip Disabled="true">Rejected</MudChip>
                            </MudTd>
                            <MudTd>
                            </MudTd>
                        }
                        else if (@context.Status == 2)
                        {
                            <MudTd>
                                <MudChip Color="Color.Success" Disabled="true">Approved</MudChip>
                            </MudTd>
                            <MudTd>
                                <MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="HandleApprove" />
                            </MudTd>
                        }
                        else if (@context.Status == 1)
                        {
                            <MudTd>
                                <MudChip Color="Color.Warning" Disabled="true">Partially Approved</MudChip>
                            </MudTd>
                            <MudTd>
                                <MudButton EndIcon="@Icons.Material.Filled.Cancel" OnClick="HandleApprove" />
                            </MudTd>
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudContainer>

</MudContainer>

<MudDialog IsVisible="@showConfirmationDialog">
    <DialogContent>
        Are you sure you want to cancel?
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ConfirmCancellation">Yes</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => showConfirmationDialog = false)">No</MudButton>
    </DialogActions>
</MudDialog>


@code {

    private IReadOnlyList<DayTimeOffRequestDTO>? TimeOffLists;
    private EmailDTO emailInfo;
    private string selectedYear = DateTime.Now.Year.ToString();

    string? employee;
    List<string> years;


    private bool showConfirmationDialog = false;
    private int requestIdToDelete = 0;

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Request List", href: null, disabled: true)
    };

    //When the page loads, it will be displaying data accordingly. Default year will be current year.
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        int currentYear = DateTime.Now.Year;
        years = new List<string>();
        for (int y = 2020; y <= currentYear; y++)
        {
            years.Add(y.ToString());
        }
        employee = await AuthService.GetUserEmplCode();
        TimeOffLists = await DayTimeOffRequestService.GetAllEmployeeDayTimeOffRequestList(employee, selectedYear);


        //Instead of refreshing whole page, just render values again
        StateHasChanged();

    }

    //Warning if user tries to cancel approved one
    private async void HandleApprove()
    {
        await DialogService.ShowMessageBox(
            "Warning!",
            "Your request has been approved already.\nPlease contact HR at hr@miasfashion.com");
    }

    //Used to set Dialog 
    private void HandleCancelConfirmation(int id)
    {
        requestIdToDelete = id;
        showConfirmationDialog = true;
    }

    /// <summary>
    /// When user confirms cancellation, cancel the request and close dialog
    /// </summary>
    private async Task ConfirmCancellation()
    {
        try
        {
            var empl = await AuthService.GetUserEmplCode();
            var result = await DayTimeOffRequestService.CancelDayTimeOffRequest(requestIdToDelete, empl);

            var name = await AuthService.GetUserName();
            string? message = await result.Content.ReadAsStringAsync();

            if (message == "Canceled Successfully !")
            {
                emailInfo = new EmailDTO { Body = "eMHRS reqeust has been canceled by " + name + ". Please log into eMHRS to confirm.", 
                Subject = "eMHRS Request Canceled", To = empl, ApprovStep = "CANCEL"};
                var email = await EmailService.SendEmail(emailInfo);

                Snackbar.Add("Canceled Successfully !", Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
                await OnInitializedAsync(); // Refresh the data
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during cancellation: {ex.Message}");
            Snackbar.Add("An error occurred during cancellation.", Severity.Normal, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
        }
        finally
        {
            showConfirmationDialog = false; // Close the confirmation dialog
        }
    }


    /// <summary>
    /// Handles the input of the selected year to retrieve the Day Time Off (DTO) history of the user for the year.
    /// </summary>
    private async Task HandleYearInput()
    {
        try
        {
            //employee = await AuthService.GetUserEmplCode(); Already called during Init
            TimeOffLists = await DayTimeOffRequestService.GetAllEmployeeDayTimeOffRequestList(employee, selectedYear);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    // Navigation Tab
    int activeIndex = 1;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/daytimeoff/info");
        }
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/daytimeoff/list");
        }
    }

    //Toggles when user clicks Create Request
    private async void Request()
    {
        var parameters = new DialogParameters<DayTimeOffRequest>();
        parameters.Add(x => x.ContentText, "New Time Off Request");
        parameters.Add(x => x.ButtonText, "Confirm");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = DialogService.Show<DayTimeOffRequest>("New Time Off Request", parameters, options);

        //Wait for the dialog to close
        var result = await dialog.Result;

        //Render again if Dialog was not cancelled
        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }

    }

    //Toggles when user clicks Edit Button
    private async void HandleEdit(int id)
    {
        var parameters = new DialogParameters<DayTimeOffEdit>();
        parameters.Add(x => x.ContentText, "Edit Time Off Request");
        parameters.Add(x => x.ButtonText, "Confirm Edit");
        parameters.Add(x => x.Color, Color.Success);
        parameters.Add(x => x.seq, id);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = DialogService.Show<DayTimeOffEdit>("Edit Time Off Request", parameters, options);

        //Wait for the dialog to close
        var result = await dialog.Result;

        //Render again if Dialog was not cancelled
        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }


}
