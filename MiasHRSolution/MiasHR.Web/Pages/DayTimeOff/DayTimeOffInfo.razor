@page "/"
@page "/daytimeoff/info"

@attribute [Authorize]

@using MiasHR.Web.Shared

@inject IEmployeeInfoRequestService EmployeeInfoRequestService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<PageTitle>Day Time Off Information</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudPaper Class="d-flex px-8 justify-space-between align-items-center flex-grow-1" Elevation="0">
        <MudText Class="ml-2" Typo="Typo.h4">Day Time Off Information</MudText>
        <MudButton OnClick="OpenNewRequestDialog" Variant="Variant.Filled" Color="Color.Secondary"
                   Style="width: 200px; height: 60px;">
            Request Time Off
        </MudButton>
    </MudPaper>
    <TimeOffInfo vacData="vacData" sickData="sickData" sickTable="sickTable" vacTable="vacTable">
    </TimeOffInfo>
</MudContainer>
<script>
    window.windowResizeHandler = function (dotnetHelper) {
        window.addEventListener('resize', () => {
            dotnetHelper.invokeMethodAsync('HandleWindowResize');
        });
    };

</script>
@code {
    TelerikChart TotalChart { get; set; }
    TelerikChart PTOChart { get; set; }

    // default values for vacation data
    private List<ModelData> vacData;
    private List<ModelData> vacTable;
    private List<ModelData> sickData;
    private List<ModelData> sickTable;

    // Fetch data from DB and populate chart
    private async Task PopulateChart(List<ModelData> vacData, List<ModelData> sickData)
    {
        try
        {
            var emplCode = await AuthService.GetUserEmplCode();
            var dto = new EmployeeDayTimeOffRemainingDTO { };

            if (emplCode != null)
            {
                dto = await DayTimeOffRequestService.GetDayTimeOffRemainingByEmployee(emplCode, DateTime.Now.Year);
            }

            vacData[0].Value = (double)dto.s_used_days;
            vacData[1].Value = (double)dto.s_available_curr_days;
            vacData[2].Value = (double)dto.s_year_basic_days - (double)dto.s_curr_basic_days;

            vacTable[0].Value = (double)dto.s_carry_over_days;
            vacTable[1].Value = (double)dto.s_curr_basic_days;
            vacTable[2].Value = (double)dto.s_adjust_days;
            vacTable[3].Value = (double)dto.s_used_days;
            vacTable[4].Value = (double)dto.s_available_curr_days;

            sickData[0].Value = (double)dto.s_used_sick_days;
            sickData[1].Value = (double)dto.s_sick_days - (double)dto.s_used_sick_days;

            sickTable[0].Value = (double)5;
            sickTable[1].Value = (double)dto.s_used_sick_days;
            sickTable[2].Value = (double)dto.s_sick_days - (double)dto.s_used_sick_days;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An Error occured while Populating Chart: {ex.Message}", Severity.Warning, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
        }
    }

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: null, disabled: true),
        new BreadcrumbItem("Day Time Off Information", href: null, disabled: true)
    };

    // Navigation Tab
    int activeIndex = 0;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/daytimeoff/info");
        }
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/daytimeoff/list");
        }
    }

    // New DayTimeOff Request
    private void OpenNewRequestDialog()
    {
        var parameters = new DialogParameters<NewRequestDialog>();
        parameters.Add(x => x.ContentText, "New Time Off Request");
        parameters.Add(x => x.ButtonText, "Confirm");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        DialogService.Show<NewRequestDialog>("New Time Off Request", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        vacData = EmployeeInfoRequestService.GetDefaultVacData();
        vacTable = EmployeeInfoRequestService.GetDefaultVacTable();
        sickData = EmployeeInfoRequestService.GetDefaultSickData();
        sickTable = EmployeeInfoRequestService.GetDefaultSickTable();

        await PopulateChart(vacData, sickData);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.windowResizeHandler", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleWindowResize()
    {
        await Task.Delay(20);


        // Call chart refresh method here
        TotalChart.Refresh();
        PTOChart.Refresh();
    }

}