@page "/timeattendance" 

@attribute [Authorize]

@using System.Globalization

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITimeAttendanceService TimeAttendanceService
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<PageTitle>Time & Attendance</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudContainer Class="d-flex">
        <MudText Class="ml-4" Typo="Typo.h4">Time & Attendance</MudText>
    </MudContainer>
    <MudContainer Class="d-flex flex-column">
        <MudPaper Class="pa-4" Elevation="0">
            <MudPaper Class="d-inline-flex mx-4 mb-4 pa-4">
                <MudDateRangePicker Class="ma-2" Label="Date Range" @bind-DateRange="_dateRange" />
                <MudButton Class="ma-2" OnClick="submit" Variant="Variant.Filled" Color="Color.Primary">Search</MudButton>
            </MudPaper>
        </MudPaper>
        <MudPaper Class="mx-4 pa-4" Elevation="0">
            <MudTable Items="@TimeList">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Level One Count</MudTh>
                    <MudTh>Level One Minute</MudTh>
                    <MudTh>Level Two Count</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.empl_name</MudTd>
                    <MudTd DataLabel="level1">@context.level_1_cnt</MudTd>
                    <MudTd DataLabel="level1_min">@context.level_1_minutesum</MudTd>
                    <MudTd DataLabel="level2">@context.level_2_cnt</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
        <MudPaper Class="mx-4 pa-4" Elevation="0">
            <MudTable Items="@TimeHistory" AllowUnsorted="false">
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeTimeHistoryDTO, object>(x=>x.date)">Date</MudTableSortLabel></MudTh>
                    <MudTh>In Out</MudTh>
                    <MudTh>Time</MudTh>
                    <MudTh>Level</MudTh>
                    <MudTh>Day Schedule</MudTh>
                    <MudTh>Reason</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.date</MudTd>
                    <MudTd DataLabel="Inout">@context.inout</MudTd>
                    <MudTd DataLabel="StartTime">@context.work_start_time</MudTd>
                    <MudTd DataLabel="Latelvl">@context.late_level</MudTd>
                    <MudTd DataLabel="Update">@context.update_type</MudTd>
                    <MudTd DataLabel="Reason">@context.reason_desc</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
                <NoRecordsContent>
                    <MudPaper Elevation="0" Class="d-flex justify-center" Width="100%" Height="100%">
                        <MudText>No Time & Attendance Record</MudText>
                    </MudPaper>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
    </MudContainer>
</MudContainer>

@code {
    private IReadOnlyList<EmployeeTimeHistoryDTO> TimeHistory = new List<EmployeeTimeHistoryDTO>();
    private List<EmployeeTimeListDTO> TimeList = new List<EmployeeTimeListDTO>();
    private TimeAttendanceDTO employeeInfo = new TimeAttendanceDTO();
    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Time Attendance", href: null, disabled: true)
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //summarizeTimeAttendance();
    }

    private DateRange _dateRange = new DateRange(DateTime.Now.AddDays(-7).Date, DateTime.Now.Date);    

    private async Task submit()
    {
        employeeInfo.EmplCode = await AuthService.GetUserEmplCode();
        employeeInfo.DateFrom = _dateRange.Start.Value;
        employeeInfo.DateTo = _dateRange.End.Value;

        //await Task.Delay(2000);
        TimeList = new List<EmployeeTimeListDTO>();

        TimeList.Add(await TimeAttendanceService.GetEmployeeTimeList(employeeInfo));
        
        TimeHistory = await TimeAttendanceService.GetHrEmployeeTimeHistory(employeeInfo);
    }

    /*
    public void summarizeTimeAttendance()
    {
        int levelOneCount = 0;
        int levelOneMins = 0;
        int levelTwoCount = 0;
        TimeOnly start = new TimeOnly(8, 0);

        foreach(TimeAttendanceRecord t in timeAttendanceHistory)
        {
            if(t.Level == 1)
            {
                levelOneCount += 1;
                TimeSpan diff = t.Time - start;
                levelOneMins += Convert.ToInt32(diff.TotalMinutes);
            } 
            else if(t.Level == 2)
            {
                levelTwoCount += 1;
            }
        }
        summary[0].LevelOneCount = levelOneCount;
        summary[0].LevelOneMins = levelOneMins;
        summary[0].LevelTwoCount = levelTwoCount;
    }
    */
   }