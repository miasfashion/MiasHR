@page "/timeattendance"

<PageTitle>Time & Attendance</PageTitle>
<MudContainer Class="mt-16 px-8" MaxWidth="MudBlazor.MaxWidth.False">
    <MudBreadcrumbs Items="_breadcrumbs" />

    @* TODO: Set name to user name *@
    <UserNameCard />

    <MudPaper Class="d-inline-flex ma-4 pa-4">
        <MudDateRangePicker Class="ma-2" Label="Date Range" @bind-DateRange="_dateRange" />
        <MudButton Class="ma-2" OnClick="submit" Variant="Variant.Filled" Color="Color.Primary">Search</MudButton>
    </MudPaper>
    <MudPaper Class="ma-4 pa-4">
        <MudTable Items="@summary">
            <HeaderContent>
                <MudTh>Level One Count</MudTh>
                <MudTh>Level One Minute</MudTh>
                <MudTh>Level Two Count</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Type">@context.LevelOneCount</MudTd>
                <MudTd DataLabel="Days">@context.LevelOneMins</MudTd>
                <MudTd DataLabel="Days">@context.LevelTwoCount</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
    <MudPaper Class="ma-4 pa-4">
        <MudTable Items="@timeAttendanceHistory">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>In Out</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>Level</MudTh>
                <MudTh>Day Schedule</MudTh>
                <MudTh>Reason</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Type">@context.Date</MudTd>
                <MudTd DataLabel="Days">@context.InOut</MudTd>
                <MudTd DataLabel="Days">@context.Time</MudTd>
                <MudTd DataLabel="Days">@context.Level</MudTd>
                <MudTd DataLabel="Days">@context.DaySchedule</MudTd>
                <MudTd DataLabel="Days">@context.Reason</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    public class TimeAttendanceRecord
    {
        public DateOnly Date { get; set; }
        public string InOut { get; set; }
        public TimeOnly Time { get; set; }
        public int Level { get; set; }
        public string? DaySchedule { get; set; }
        public string? Reason { get; set; }
    }

    public class TimeAttendanceSummary
    {
        public string Name { get; set; }
        public int LevelOneCount { get; set; }
        public int LevelOneMins { get; set; }
        public int LevelTwoCount { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        summarizeTimeAttendance();
    }

    private DateRange _dateRange = new DateRange(DateTime.Now.AddDays(-7).Date, DateTime.Now.Date);

    private List<TimeAttendanceRecord> timeAttendanceHistory = new List<TimeAttendanceRecord>
    {
        new TimeAttendanceRecord { Date=new DateOnly(2023,11,30), InOut="In", Time=new TimeOnly(8,5), Level=1, DaySchedule="", Reason=""},
        new TimeAttendanceRecord { Date=new DateOnly(2023,11,30), InOut="Out", Time=new TimeOnly(17,0), Level=0, DaySchedule="", Reason=""},
        new TimeAttendanceRecord { Date=new DateOnly(2023,12,01), InOut="In", Time=new TimeOnly(8,6), Level=1, DaySchedule="", Reason=""}
    };

    private List<TimeAttendanceSummary> summary = new List<TimeAttendanceSummary>
    {
        new TimeAttendanceSummary() 
    };

    async Task submit()
    {
        await Task.Delay(2000);
        @*Do something*@
    }

    public void summarizeTimeAttendance()
    {
        int levelOneCount = 0;
        int levelOneMins = 0;
        int levelTwoCount = 0;
        TimeOnly start = new TimeOnly(8, 0);

        foreach(TimeAttendanceRecord t in timeAttendanceHistory)
        {
            if(t.Level == 1)
            {
                levelOneCount += 1;
                TimeSpan diff = t.Time - start;
                levelOneMins += Convert.ToInt32(diff.TotalMinutes);
            } 
            else if(t.Level == 2)
            {
                levelTwoCount += 1;
            }
        }
        summary[0].LevelOneCount = levelOneCount;
        summary[0].LevelOneMins = levelOneMins;
        summary[0].LevelTwoCount = levelTwoCount;
    }

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Time Attendance", href: null, disabled: true)
    };
}
