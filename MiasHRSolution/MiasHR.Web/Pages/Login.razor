@page "/login"

@attribute [AllowAnonymous]

@layout LoginLayout

@using Microsoft.AspNetCore.Components
@using MiasHR.Models.DTOs;
@using MiasHR.Web.Services.Contracts;

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IConfiguration Configuration
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>
<MudPaper Class="d-flex pa-2 justify-center align-center" MinHeight="350px" MinWidth="340px">
    <MudPaper Class="pa-4" Elevation="0">
        @if (isProcessing)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        }

        else
        {
            @if (loginFailed)
            {
                <MudAlert Severity="Severity.Error" Dense>Invalid username or password.</MudAlert>
            }
            <MudForm @ref="form" Model="userCredentials" Validation="true" @onkeydown="@HandleEnterKeyPress">
                <MudTextField Label="Username" @bind-Value="userCredentials.Username" Immediate="true" Required="true" RequiredError="Username is required!" Variant="Variant.Outlined" />
                <MudTextField Label="Password" @bind-Value="userCredentials.Password" Immediate="true" FullWidth
                               Required="true" RequiredError="Password is required!" Variant="Variant.Outlined"
                               InputType="@passwordInputType"
                               Adornment="Adornment.End" AdornmentIcon="@passwordAdornmentIcon"
                               OnAdornmentClick="TogglePasswordVisibility" AdornmentAriaLabel="Show Password" />
                 <div class="d-flex align-center justify-end mt-1">
                     <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLogin" Disabled="@isProcessing" EndIcon="@Icons.Material.Filled.Login" Class="m-2">Login</MudButton>
                     <MudButton OnClick='()=>NavigationManager.NavigateTo("/registration")' Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Primary">
                         <MudText>Create Account</MudText>
                     </MudButton>
                 </div>
                 <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick='()=>NavigationManager.NavigateTo("/forgotPW")'>Forgot Password?</MudButton>
             </MudForm>

        }

    </MudPaper>
</MudPaper>

@code {
    private UserDTO userCredentials = new UserDTO();
    private bool loginFailed = false;
    private bool success = false;
    private bool showPassword = false;
    private bool isProcessing = false;

    private InputType passwordInputType => showPassword ? InputType.Text : InputType.Password;
    private string passwordAdornmentIcon => showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;

    string[] errors = { };
    MudForm form;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task HandleLogin()
    {
        isProcessing = true;
        StateHasChanged();

        try
        {
            var result = await AuthService.Login(userCredentials);
            if (result.IsSuccessStatusCode)
            {
                if (await AuthService.IsLoggedIn())
                {
                    isProcessing = false;
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    isProcessing = false;
                    loginFailed = true;
                }
            }
            else
            {
                isProcessing = false;
                loginFailed = true;
            }
        }
        catch (Exception ex)
        {
            isProcessing = false;
            loginFailed = true;
            throw ex;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    // Keystroke binding
    private void HandleEnterKeyPress(KeyboardEventArgs e)
    {
        if (!isProcessing && (e.Code == "Enter" || e.Key == "Enter"))
        {
            HandleLogin();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsLoggedIn())
        {
            NavigationManager.NavigateTo("/");
        }
    }
}