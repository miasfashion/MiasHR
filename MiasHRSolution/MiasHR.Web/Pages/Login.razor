@page "/"

@attribute [AllowAnonymous]

@layout LoginLayout

@using Microsoft.AspNetCore.Components
@using MiasHR.Models.DTOs;
@using MiasHR.Web.Services.Contracts;

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IAuthService AuthService
@inject IConfiguration Configuration
@inject ISnackbar Snackbar


<PageTitle>Login</PageTitle>
<MudPaper Class="d-flex pa-2 justify-center" MaxWidth="100%">
    <MudPaper Class="pa-4" Elevation="0">
        @if (loginFailed)
        {
            <MudAlert Severity="Severity.Error" Dense>Invalid username or password.</MudAlert>
        }
        <MudForm @ref="form" Model="userCredentials" Validation="true">
            <MudTextField Label="Username" @bind-Value="userCredentials.Username" Required="true" RequiredError="Username is required!" Variant="Variant.Outlined" />
            <MudTextField Label="Password" @bind-Value="userCredentials.Password" FullWidth
                           Required="true" RequiredError="Password is required!" Variant="Variant.Outlined"
                           InputType="@passwordInputType"
                           Adornment="Adornment.End" AdornmentIcon="@passwordAdornmentIcon"
                           OnAdornmentClick="TogglePasswordVisibility" AdornmentAriaLabel="Show Password" />
            <div class="d-flex align-center justify-end mt-1">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLogin" EndIcon="@Icons.Material.Filled.Login" Class="ml-auto">Login</MudButton>
            </div>
        </MudForm>
    </MudPaper>
</MudPaper>

 @code {
    private UserDTO userCredentials = new UserDTO();
    private bool loginFailed = false;
    private bool success = false;
    private bool showPassword = false;

    private InputType passwordInputType => showPassword ? InputType.Text : InputType.Password;
    private string passwordAdornmentIcon => showPassword ? Icons.Filled.VisibilityOff : Icons.Filled.Visibility;

    string[] errors = { };
    MudForm form;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthService.Login(userCredentials);
            if(await AuthService.IsLoggedIn())
            {
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                Snackbar.Add("Login Failed");
            }
        }
        catch (Exception ex)
        {
            throw;
        }

    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
}