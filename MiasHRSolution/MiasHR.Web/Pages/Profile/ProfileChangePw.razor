@page "/profile/changepw"

<PageTitle>Change Password</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<UserAvatar />
<MudPaper Class="d-flex m-5 justify-content-center" Elevation="0">
    @using System.Text.RegularExpressions
    @using System.ComponentModel.DataAnnotations

    <MudGrid>
        <MudItem xs="6" sm="6">
            <MudPaper Class="pa-5 m-5">

                @*TODO: Current Password to check validation?*@
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" 
                                  OnAdornmentClick="PWVisibilityClick" AdornmentAriaLabel="Check Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Type New Password!" />
                    <MudTextField T="string" Label="Password" HelperText="Repeat the password"
                                  InputType="@PasswordCheckInput" Adornment="Adornment.End" AdornmentIcon="@PasswordCheckIcon"
                                  OnAdornmentClick="PWCheckVisibilityClick" AdornmentAriaLabel="Check Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))" Required="true"
                                  RequiredError="Type your New Password Again"/>
                    <div class="d-flex align-center justify-space-between">
                       @* <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />*@
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="6">
            <MudPaper Class="pa-5 m-5">
                <MudList>
                    <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must be at least of length 8" />
                    <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must contain at least one capital letter" />
                    <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must contain at least one lowercase letter" />
                    <MudListItem Icon="@Icons.Material.Filled.Info" Text="Must contain at least one digit" />
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {

    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/home"),
        new BreadcrumbItem("My Profile", href: "/profile"),
        new BreadcrumbItem("Change Password", href: null, disabled: true)
    };
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    // Password Visibility Section
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType PasswordCheckInput = InputType.Password;
    string PasswordCheckIcon = Icons.Material.Filled.VisibilityOff;

    void PWVisibilityClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void PWCheckVisibilityClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordCheckIcon = Icons.Material.Filled.VisibilityOff;
            PasswordCheckInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordCheckIcon = Icons.Material.Filled.Visibility;
            PasswordCheckInput = InputType.Text;
        }
    }

}
