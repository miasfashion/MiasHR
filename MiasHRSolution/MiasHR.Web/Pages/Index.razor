@page "/"

@attribute [Authorize]

@using MiasHR.Web.Services.Contracts;

@inject IAuthService AuthService

<MudContainer Class="mt-16 px-8" MaxWidth="MudBlazor.MaxWidth.False">
    @*<MudBreadcrumbs Items="_breadcrumbs" />*@
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                        <MudAlert Icon="@Icons.Material.Filled.WorkHistory" Severity="Severity.Normal" Class="my-2">
                            This Week
                            @string.Join(", ", thispeople.Select(i => $"{i}"))
                            are Off
                        </MudAlert>
                        <MudAlert Icon="@Icons.Material.Filled.NextWeek" Severity="Severity.Normal" Class="my-2">
                            Next Week
                            @string.Join(", ", nextpeople.Select(i => $"{i}"))
                            are Off
                        </MudAlert>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                        <MudAlert Severity="Severity.Warning" Class="my-2">You have @ptoamt pending Time Off Requests</MudAlert>
                        @*Added Progress ex. Domino pizza tracker just so dashboard doesn't look empty*@
                        @foreach (var item in sampRequest)
                        {
                            @if (item.Approved == "N")
                            {
                                <MudText Typo="Typo.body1">
                                    Request for @item.From to @item.To
                                    is still pending
                                </MudText>
                                <MudProgressLinear Color="@colors[sampRequest.IndexOf(item) % colors.Length]" Striped="true" Size="Size.Large" Value="50" Class="my-2">
                                    <MudText>Waiting for Approve...</MudText>
                                </MudProgressLinear>
                            }
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                        @if (api_success)
                        {
                            <MudText>Api call success</MudText>
                        }
                        else
                        {
                            <MudText>Api call failed</MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                        <Calendar />
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", "/")
    };

    //List of PTO (Time Off) Requests that have status 1 OPEN
    public class OffRequest
    {
        public DateTime Request { get; set; }
        public string? Type { get; set; }
        public DateTime From { get; set; }
        public DateTime To { get; set; }
        public string? Approved { get; set; }
    }
    //this week off people Will have to check whether approved, if date falls between M-F then save name
    string[] thispeople = { "Joe", "Jae", "Joo", "John" };
    string[] nextpeople = { "Poo", "Pong", "Pack", "Ping" };
    //Calculate the pending
    int ptoamt = 1;
    //Used to switch Colors
    MudBlazor.Color[] colors = { MudBlazor.Color.Secondary, MudBlazor.Color.Primary, MudBlazor.Color.Success, MudBlazor.Color.Info, MudBlazor.Color.Warning, MudBlazor.Color.Error };

    List<OffRequest> sampRequest = new List<OffRequest>(){
        new OffRequest { Request= new DateTime(2023,12,23), Type="ABSENCE (by HR)", From = new DateTime(2023,12,23), To = new DateTime(2024,01,23), Approved = "N"},
        new OffRequest { Request= new DateTime(2023,12,14), Type="Sick day [ DAY OFF ]", From = new DateTime(2023,12,24), To = new DateTime(2024,1,22), Approved = "Y"},
        new OffRequest { Request= new DateTime(2023,11,11), Type="Sick day [ DAY OFF ]", From = new DateTime(2023,12,11), To = new DateTime(2023,12,22), Approved = "Y"}
    };



    // TODO: remove before production
    private bool api_success = false;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsLoggedIn())
        {
            var emplCode = await AuthService.GetUserEmplCode();
            var response = await AuthService.TestApi(emplCode);
            if (response == "success")
            {
                api_success = true;
            }
        }
    }
}