@page "/manager/employeeinfo"

@attribute [Authorize(Roles = "Manager")]
@using MiasHR.Web.Shared


@inject IEmployeeInfoRequestService EmployeeInfoRequestService
@inject IAuthService AuthService

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>
<PageTitle>Employee Day Time Off Information</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudPaper Class="d-flex px-8 justify-space-between align-items-center flex-grow-1" Elevation="0">
        <MudText Class="ml-2" Typo="Typo.h4">Day Time Off Information</MudText>
        <MudPaper Class="mt-0 mb-2" Width="400px">
        <MudSelect Class="p-4" T="ManagerEmployeeListDTO"
                   @bind-Value="@employee" Label="Managing Employees" 
                   AdornmentIcon="@Icons.Material.Filled.ArrowDropDown" AnchorOrigin="Origin.BottomCenter" @bind-Value:after=@HandleEmplInput>
            @foreach (var empl in employees)
            {
                <MudSelectItem Value="@empl">@empl.last_name, @empl.first_name @empl.empl_name</MudSelectItem>
            }
        </MudSelect>
        </MudPaper>
    </MudPaper>
    <TimeOffInfo vacData="vacData" sickData="sickData" sickTable="sickTable" vacTable="vacTable">
    </TimeOffInfo>
</MudContainer>

<script>
    window.windowResizeHandler = function (dotnetHelper) {
        window.addEventListener('resize', () => {
            dotnetHelper.invokeMethodAsync('HandleWindowResize');
        });
    };

</script>
@code {

    //
    private IEnumerable<ManagerEmployeeListDTO> selectedEmployees = new List<ManagerEmployeeListDTO>();
    private ManagerEmployeeListDTO employee;
    private IReadOnlyList<ManagerEmployeeListDTO> employees = new List<ManagerEmployeeListDTO>();

    TelerikChart TotalChart { get; set; }
    TelerikChart PTOChart { get; set; }

    // default values for vacation data
    private List<ModelData> vacData;
    private List<ModelData> vacTable;
    private List<ModelData> sickData;
    private List<ModelData> sickTable;
    private string jmnOption = "N";


    // Fetch data from DB and populate chart
    private async Task PopulateChart(List<ModelData> vacData, List<ModelData> sickData)
    {
        try
        {
            var dto = new EmployeeDayTimeOffRemainingDTO { };

            if (employee.empl_code != null)
            {
                dto = await DayTimeOffRequestService.GetDayTimeOffRemainingByEmployee(employee.empl_code, DateTime.Now.Year);
            }

            vacData[0].Value = (double)dto.s_used_days;
            vacData[1].Value = (double)dto.s_available_curr_days;
            vacData[2].Value = (double)dto.s_year_basic_days - (double)dto.s_curr_basic_days;

            vacTable[0].Value = (double)dto.s_carry_over_days;
            vacTable[1].Value = (double)dto.s_curr_basic_days;
            vacTable[2].Value = (double)dto.s_adjust_days;
            vacTable[3].Value = (double)dto.s_used_days;
            vacTable[4].Value = (double)dto.s_available_curr_days;

            sickData[0].Value = (double)dto.s_used_sick_days;
            sickData[1].Value = (double)dto.s_sick_days - (double)dto.s_used_sick_days;

            sickTable[0].Value = (double)5;
            sickTable[1].Value = (double)dto.s_used_sick_days;
            sickTable[2].Value = (double)dto.s_sick_days - (double)dto.s_used_sick_days;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An Error occured while Populating Chart: {ex.Message}", Severity.Warning, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
        }
    }

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: null, disabled: true),
        new BreadcrumbItem("Manager", href: null, disabled: true),
        new BreadcrumbItem("Employee Time Off Information", href: null, disabled: true)
    };


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        vacData = EmployeeInfoRequestService.GetDefaultVacData();
        vacTable = EmployeeInfoRequestService.GetDefaultVacTable();
        sickData = EmployeeInfoRequestService.GetDefaultSickData();
        sickTable = EmployeeInfoRequestService.GetDefaultSickTable();
        var managerEmpl = await AuthService.GetUserEmplCode();
        if (managerEmpl == "100165")
        {
            jmnOption = "Y";
        }

        // jmn option will be used to get all members from the department JMN manages (Requested 7/12/24)
        employees = await EmployeeInfoRequestService.GetManagerEmployeeList(managerEmpl, jmnOption);
        if (employees.Count > 0)
        {
            employee = employees[0];
        }
        await PopulateChart(vacData, sickData);
        StateHasChanged();
    }

    /// <summary>
    /// Handles the input of the selected employee to retrieve the Day Time Off (DTO) information.
    /// </summary>
    private async Task HandleEmplInput()
    {
        try
        {
            //employee = await AuthService.GetUserEmplCode(); Already called during Init
            await PopulateChart(vacData, sickData);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An Error occured while loading Request History: {ex.Message}", Severity.Warning, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.windowResizeHandler", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleWindowResize()
    {
        await Task.Delay(20);


        // Call chart refresh method here
        TotalChart.Refresh();
        PTOChart.Refresh();
    }

}