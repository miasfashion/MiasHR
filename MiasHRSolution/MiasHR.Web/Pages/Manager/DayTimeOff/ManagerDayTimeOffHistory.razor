@page "/manager/daytimeoff/history"

@attribute [Authorize(Roles = "Manager")]

@using MiasHR.Models.DTOs;
@using MiasHR.Web.Services.Contracts;
@using System.Globalization

@inject NavigationManager NavigationManager
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject IAuthService AuthService

<PageTitle>Manage Day Time Off History</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudPaper Class="d-flex px-8 justify-left align-items-center flex-grow-1" Elevation="0">
        <MudText Class="ml-4" Typo="Typo.h4">Day Time Off History</MudText>
        <MudPaper Elevation="0" Style="width: 200px; height: 60px;"></MudPaper>
    </MudPaper>
    <MudPaper Class="d-block" Elevation="0">
        <MudTable Filter="new Func<DayTimeOffApprovalHistoryDTO,bool>(FilterFunc1)" Class="m-4 flex-grow-1 gap-4" Items="@approvalHistory">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudSpacer />
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search by name or request type" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Request Date</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>From</MudTh>
                <MudTh>To</MudTh>
                <MudTh Style="text-align:center">First Approval</MudTh>
                <MudTh Style="text-align:center">Second Approval</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ReqDate">@DateTime.ParseExact(@context.req_date, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudTd>
                <MudTd DataLabel="Name">@context.empl_name</MudTd>
                <MudTd DataLabel="Type">@context.req_sub_type</MudTd>
                <MudTd DataLabel="From">@DateTime.ParseExact(@context.period_from, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudTd>
                <MudTd DataLabel="To">@DateTime.ParseExact(@context.period_to, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudTd>
                <MudTd DataLabel="FirstApproval" Style="text-align:center">@RenderApprovalIcon(@context.approve_1st_yn)</MudTd>
                <MudTd DataLabel="SecondApproval" Style="text-align:center">@RenderApprovalIcon(@context.approve_2nd_yn)</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudPaper Height="100px" Elevation="0">
                    <MudText>No approvals yet</MudText>
                </MudPaper>
            </NoRecordsContent>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {
    private IReadOnlyList<DayTimeOffApprovalHistoryDTO> approvalHistory = new List<DayTimeOffApprovalHistoryDTO>();

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: null, disabled: true),
        new BreadcrumbItem("Manager", href: null, disabled: true),
        new BreadcrumbItem("Day Time Off Request History", href: null, disabled: true)
    };

    // Navigation Tab
    int activeIndex = 1;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/manager/daytimeoff/requests");
        }
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/manager/daytimeoff/history");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var managerEmplCode = await AuthService.GetUserEmplCode();

        if (managerEmplCode != null)
        {
           approvalHistory = await DayTimeOffRequestService.GetHrDayTimeOffApprovalHistory(managerEmplCode);
        }
    }

    // handle table search by employee name and request type
    private string searchString1 = "";

    private bool FilterFunc1(DayTimeOffApprovalHistoryDTO history) => FilterFunc(history, searchString1);

    private bool FilterFunc(DayTimeOffApprovalHistoryDTO history, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (history.empl_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(history.req_date, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(history.period_from, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(history.period_to, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private RenderFragment RenderApprovalIcon(string approvalProperty)
    {
        bool isApproved = approvalProperty.Equals("Y");
        string icon = isApproved ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RemoveCircle;
        Color color = isApproved ? Color.Primary : Color.Secondary;

        return@<MudIcon Icon="@icon" Color="@color" />;
    }
}
