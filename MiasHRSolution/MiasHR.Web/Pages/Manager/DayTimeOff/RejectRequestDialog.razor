@using MiasHR.Models.DTOs;
@using MiasHR.Web.Services.Contracts;

@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IEmailService EmailService

<MudDialog>
    <DialogContent>
        <MudForm Class="pa-4">
            <MudText Class="mb-2">Add Reject Reason</MudText>
            <MudTextField T="string" Label="Reject Reason" Variant="Variant.Text" Text="@rejectReason" Lines="5" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="RejectRequest">Reject</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public PendingDayTimeOffApprovalDTO Dto { get; set; }

    private string rejectReason = "";
    private EmailDTO emailInfo;

    void Cancel() => MudDialog.CancelAll();

    private async Task RejectRequest()
    {
        var managerEmplCode = await AuthService.GetUserEmplCode();

        if (managerEmplCode != null)
        {
            RequestStatusChangeDTO request = new RequestStatusChangeDTO
                {
                    id = Dto.seq,
                    statusType = "REJECT",
                    managerEmplCode = managerEmplCode,
                    rejectReason = rejectReason
                };

            var result = await DayTimeOffRequestService.ChangeRequestStatus(request);
            if (result.result_message.Contains("Already"))
            {
                Snackbar.Add(result.result_message, Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
                return;
            }
            else
            {
                emailInfo = new EmailDTO
                    {
                        Body = result.email_content,
                        Subject = result.email_title,
                        To = managerEmplCode,
                        ApprovStep = "REJECT",
                        role = "MANAGER",
                        managerEmployee = result.email
                    };
                var email = await EmailService.SendEmail(emailInfo);
            }
        }

        MudDialog.Close(DialogResult.Ok(true));
    }
}