@attribute [Authorize(Roles = "Manager")]

@using MiasHR.Models.DTOs
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MiasHR.Web.Services.Contracts
@using System.Globalization

@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IEmailService EmailService
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4" Elevation="0">
            <MudStack>
                <MudText>Type: @Dto.req_type</MudText>
                <MudStack Row="true">
                    <MudText>Start Date: @DateTime.ParseExact(Dto.period_from, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudText>
                    <MudDivider Vertical="true" />
                    <MudText>End Date: @DateTime.ParseExact(Dto.period_to, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudText>
                </MudStack>
                <MudText>Reason: @Dto.req_sub_type</MudText>
                <MudText>About: @Dto.req_content</MudText>
            </MudStack>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="OpenRejectRequestDialog">Reject</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="ApproveRequest">Approve</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public PendingDayTimeOffApprovalDTO Dto { get; set; }

    private EmailDTO emailInfo;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private async Task ApproveRequest()
    {
        var managerEmplCode = await AuthService.GetUserEmplCode();

        if (managerEmplCode != null)
        {
            RequestStatusChangeDTO request = new RequestStatusChangeDTO
                {
                    id = Dto.seq,
                    statusType = "APPROVAL",
                    managerEmplCode = managerEmplCode,
                    rejectReason = null
                };

            var result = await DayTimeOffRequestService.ChangeRequestStatus(request);
            if (result.result_message.Contains("Already"))
            {
                Snackbar.Add(result.result_message, Severity.Normal, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
                return;
            }
            if (result.email_othernotice.Length > 0 || result.email_othernotice.Length > 0)
            {
                emailInfo = new EmailDTO
                    {
                        Body = result.email_content,
                        Subject = result.email_title,
                        To = managerEmplCode,
                        ApprovStep = "OTHERNOTICE",
                        role = "MANAGER",
                        managerEmployee = result.email,
                        managerNotice = result.email_ptonotice,
                        managerOther = result.email_othernotice
                    };
                var email = await EmailService.SendEmail(emailInfo);
            }
            else
            {
                emailInfo = new EmailDTO
                    {
                        Body = result.email_content,
                        Subject = result.email_title,
                        To = managerEmplCode,
                        ApprovStep = "APPROVE",
                        role = "MANAGER",
                        managerEmployee = result.email
                    };
                var email = await EmailService.SendEmail(emailInfo);
            }

        }
        MudDialog.Close(DialogResult.Ok(true));
        Snackbar.Add("Approved Successfully!", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
    }

    private async Task OpenRejectRequestDialog()
    {
        var parameters = new DialogParameters<DayTimeOffRequestDialog>();
        parameters.Add(x => x.Dto, Dto);

        var options = new DialogOptions {
            MaxWidth = MudBlazor.MaxWidth.Medium,
            FullWidth = true,
            DisableBackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<RejectRequestDialog>("Reject Request", parameters, options);
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Rejected Successfully", Severity.Normal, (options) =>
            {
                options.CloseAfterNavigation = true;
            });
        }

    }
}
