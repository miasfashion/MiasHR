@page "/manager/daytimeoff/requests"

@attribute [Authorize(Roles = "Manager")]

@using MiasHR.Models.DTOs;
@using MiasHR.Web.Services.Contracts;

@inject NavigationManager NavigationManager
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject IAuthService AuthService
@inject IDialogService DialogService

<PageTitle>Manage Day Time Off Requests</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" /> 
<MudContainer Class="d-block">
    <MudContainer Class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudPaper Elevation=0 MinWidth="195px"> </MudPaper>
        </MudHidden>
        <MudText Class="ml-4" Typo="Typo.h4">Day Time Off Requests</MudText>
    </MudContainer>
    <MudContainer Class="d-flex">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudPaper Elevation="0">
                <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="false"
                @bind-ActivePanelIndex="activeIndex" Style="position:sticky; top: 120px;" Class="ma-4">
                    <MudTabPanel OnClick="navPage" Text="Requests" />
                    <MudTabPanel OnClick="navPage" Text="History" />
                </MudTabs>
            </MudPaper>
        </MudHidden>
        <MudPaper Class="d-flex flex-grow-1" Elevation="0">
            <MudTable Filter="new Func<PendingDayTimeOffApprovalDTO,bool>(FilterFunc1)" Items="@pendingRequests" @ref="requestTable">
                <ToolBarContent>
                    <MudSpacer />
                    <MudSpacer />
                    <MudSpacer />
                    <MudSpacer />
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search by name or request type" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Request Date</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>First Approval</MudTh>
                    <MudTh>Second Approval</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ReqDate">@context.req_date</MudTd>
                    <MudTd DataLabel="Name">@context.empl_name</MudTd>
                    <MudTd DataLabel="Type">@context.req_type</MudTd>
                    <MudTd DataLabel="From">@context.period_from</MudTd>
                    <MudTd DataLabel="To">@context.period_to</MudTd>
                    <MudTd DataLabel="FirstApproval">@context.approve_1st_yn</MudTd>
                    <MudTd DataLabel="SecondApproval">@context.approve_2nd_yn</MudTd>
                    <MudTd>
                        <MudButton OnClick="@(() => Review(context))" Class="mud-theme-primary">Review</MudButton>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudPaper Elevation="0" Class="d-flex justify-center" Width="100%" Height="100%">
                        <MudText>No approvals yet</MudText>
                    </MudPaper>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
    </MudContainer>
</MudContainer>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool strip = true;
    private IReadOnlyList<PendingDayTimeOffApprovalDTO> pendingRequests = new List<PendingDayTimeOffApprovalDTO>();
    private MudTable<PendingDayTimeOffApprovalDTO> requestTable;

    private async void Review(PendingDayTimeOffApprovalDTO dto)
    {
        var parameters = new DialogParameters<ManagerDayTimeOffRequest>();
        parameters.Add(x => x.Dto, dto);

        var options = new DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = DialogService.Show<ManagerDayTimeOffRequest>("Review Time Off Request", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var managerEmplCode = await AuthService.GetUserEmplCode();

            if (managerEmplCode != null)
            {
                pendingRequests = await DayTimeOffRequestService.GetPendingDayTimeOffRequestList(managerEmplCode);
            }

            StateHasChanged();
        }
    }

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Manager", href: "/manager/home"),
        new BreadcrumbItem("Day Time Off Requests", href: null, disabled: true)
    };

    // Navigation Tab
    int activeIndex = 0;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/manager/daytimeoff/requests");
        } 
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/manager/daytimeoff/history");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var managerEmplCode = await AuthService.GetUserEmplCode();

        if (managerEmplCode != null)
        {
            pendingRequests = await DayTimeOffRequestService.GetPendingDayTimeOffRequestList(managerEmplCode);
        }
    }

    // handle table search by employee name and request type
    private string searchString1 = "";
    
    private bool FilterFunc1(PendingDayTimeOffApprovalDTO request) => FilterFunc(request, searchString1);
    
    private bool FilterFunc(PendingDayTimeOffApprovalDTO request, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (request.empl_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (request.req_type.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}