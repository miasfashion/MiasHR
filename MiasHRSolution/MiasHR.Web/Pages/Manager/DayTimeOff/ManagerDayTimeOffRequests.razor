@page "/manager/daytimeoff/requests"

@attribute [Authorize(Roles = "Manager")]

@using System.Globalization

@inject NavigationManager NavigationManager
@inject IDayTimeOffRequestService DayTimeOffRequestService
@inject IAuthService AuthService
@inject IDialogService DialogService

<PageTitle>Manage Day Time Off Requests</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudPaper Class="d-flex px-8 justify-left align-items-center flex-grow-1" Elevation="0">
        <MudText Class="ml-4" Typo="Typo.h4">Day Time Off Requests</MudText>
        <MudPaper Elevation="0" Style="width: 200px; height: 60px;"></MudPaper>
    </MudPaper>
    <MudPaper Class="d-block" Elevation="0">
        <MudTable Hover="true" AllowUnsorted="false" Filter="new Func<PendingDayTimeOffApprovalDTO,bool>(FilterFunc1)" 
            Class="m-2 flex-grow-1 gap-2" Items="@pendingRequests" @ref="requestTable" HeaderClass="custom-table-header" CustomHeader="true">
            <ColGroup>
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTHeadRow Class="my-0 py-0">
                    <MudTh Class="py-0" colspan="5"></MudTh>
                    <MudTh Class="py-0" colspan="4">
                        <MudToolBar DisableGutters="true">
                            <MudTextField @bind-Value="searchString1" Placeholder="Search by name or request type" 
                                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                            </MudTextField>
                        </MudToolBar>
                    </MudTh>
                </MudTHeadRow>
                <MudTHeadRow>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<PendingDayTimeOffApprovalDTO, object>(x=>x.req_date)">
                            Request Date
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Style="text-align:center">Name</MudTh>
                    <MudTh Style="text-align:center">Type</MudTh>
                    <MudTh Style="text-align:center">Used Days</MudTh>
                    <MudTh Style="text-align:center">From</MudTh>
                    <MudTh Style="text-align:center">To</MudTh>
                    <MudTh Style="text-align:center">First Approval</MudTh>
                    <MudTh Style="text-align:center">Second Approval</MudTh>
                    <MudTh></MudTh>
                </MudTHeadRow>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ReqDate">@DateTime.ParseExact(@context.req_date, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudTd>
                <MudTd DataLabel="Name">@context.empl_name</MudTd>
                <MudTd DataLabel="Type">
                    <MudText>@context.req_sub_type</MudText>
                    <hr />
                    <div class="text-container" title="@context.req_content">
                        <MudText Typo="Typo.caption">@context.req_content</MudText>
                    </div>
                </MudTd>
                <MudTd DataLabel="UsedDays">@context.days_cnt</MudTd>
                <MudTd DataLabel="From">
                    @if (context.start_time == new TimeSpan(8,0,0) && context.hours_cnt % 8 == 0)
                    {
                        @DateTime.ParseExact(@context.period_from, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
                    }
                    else
                    {
                        @DateTime.ParseExact(@context.period_from, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
                        <hr />
                        @context.start_time
                    }

                </MudTd>
                <MudTd DataLabel="To">@DateTime.ParseExact(@context.period_to, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")</MudTd>
                <MudTd DataLabel="FirstApproval" Style="text-align:center">@RenderApprovalIcon(@context.approve_1st_yn)</MudTd>
                <MudTd DataLabel="SecondApproval" Style="text-align:center">@RenderApprovalIcon(@context.approve_2nd_yn)</MudTd>
                <MudTd Style="text-align:center">
                    <MudButton OnClick="@(() => Review(context))" Class="mud-theme-primary">Review</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
            <NoRecordsContent>
                <MudPaper Elevation="0" Class="d-flex justify-center" Width="100%" Height="100%">
                    <MudText>No approvals yet</MudText>
                </MudPaper>
            </NoRecordsContent>
        </MudTable>
    </MudPaper>
</MudContainer>

<style>
    .text-container {
        max-width: 300px; /* Set maximum width to limit text length */
        overflow: hidden; /* Hide overflow text */
        text-overflow: ellipsis; /* Display ellipsis (...) for overflow text */
        white-space: nowrap; /* Prevent text from wrapping */
    }
</style>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool strip = true;
    private IReadOnlyList<PendingDayTimeOffApprovalDTO> pendingRequests = new List<PendingDayTimeOffApprovalDTO>();
    private MudTable<PendingDayTimeOffApprovalDTO> requestTable;

    private async void Review(PendingDayTimeOffApprovalDTO dto)
    {
        var parameters = new DialogParameters<ReviewRequestDialog>();
        parameters.Add(x => x.Dto, dto);

        var options = new DialogOptions
            {
                MaxWidth = MudBlazor.MaxWidth.Small,
                FullWidth = true,
                DisableBackdropClick = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<ReviewRequestDialog>("Review Time Off Request", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var managerEmplCode = await AuthService.GetUserEmplCode();

            if (managerEmplCode != null)
            {
                pendingRequests = await DayTimeOffRequestService.GetPendingDayTimeOffRequestList(managerEmplCode);
            }

            StateHasChanged();
        }
    }

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: null, disabled: true),
        new BreadcrumbItem("Manager", href: null, disabled: true),
        new BreadcrumbItem("Day Time Off Requests", href: null, disabled: true)
    };

    // Navigation Tab
    int activeIndex = 0;
    private void navPage()
    {
        if (activeIndex == 0)
        {
            NavigationManager.NavigateTo("/manager/daytimeoff/requests");
        }
        else if (activeIndex == 1)
        {
            NavigationManager.NavigateTo("/manager/daytimeoff/history");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var managerEmplCode = await AuthService.GetUserEmplCode();

        if (managerEmplCode != null)
        {
            pendingRequests = await DayTimeOffRequestService.GetPendingDayTimeOffRequestList(managerEmplCode);
        }
    }

    // handle table search by employee name and request type
    private string searchString1 = "";

    private bool FilterFunc1(PendingDayTimeOffApprovalDTO request) => FilterFunc(request, searchString1);

    private bool FilterFunc(PendingDayTimeOffApprovalDTO request, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (request.empl_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (request.req_type.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(request.req_date, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(request.period_from, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (DateTime.ParseExact(request.period_to, "yyyyMMdd", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy")
            .Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private RenderFragment RenderApprovalIcon(string approvalProperty)
    {
        bool isApproved = approvalProperty.Equals("Y");
        string icon = isApproved ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RemoveCircle;
        Color color = isApproved ? Color.Primary : Color.Secondary;

        return@<MudIcon Icon="@icon" Color="@color" />;
    }
}