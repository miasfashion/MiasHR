@page "/manager/timeattendance"

@inject IEmployeeInfoRequestService EmployeeInfoRequestService
@inject IAuthService AuthService
@inject ITimeAttendanceService TimeAttendanceService
@inject IImageService ImageService

@attribute [Authorize(Roles = "Manager")]

<PageTitle>Manage Time & Attendance</PageTitle>
<MudBreadcrumbs Items="_breadcrumbs" />
<MudContainer Class="d-block">
    <MudContainer Class="d-flex">
        <MudText Class="ml-4" Typo="Typo.h4">Time & Attendance</MudText>
    </MudContainer>
    <MudContainer Class="d-flex flex-column">
        <MudPaper Class="d-flex pa-4" Elevation="0">
            <MudPaper Class="d-inline-flex mx-4 mb-4 pa-4">
                <MudStack Class="mx-2 mb-2">
                    <MudSelect T="ManagerEmployeeListDTO" MultiSelection="true" SelectAll="true" SelectAllText="Select All Employees" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                               @bind-Value="@employee" @bind-SelectedValues="@selectedEmployees" Label="Managing Employees"
                               AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var empl in employees)
                        {
                            <MudSelectItem Value="@empl">@empl.last_name, @empl.first_name @empl.empl_name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudDateRangePicker Label="Date Range" @bind-DateRange="_dateRange" />
                </MudStack>
                <MudButton Class="ma-2" OnClick="submit" Variant="Variant.Filled" Disabled="@isProcessing" Color="Color.Primary" Style="width:100px">
                    @if (isProcessing)
                    {
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Small" />
                    }
                    else
                    {
                        <MudText>Search</MudText>
                    }
                </MudButton>
            </MudPaper>
            <MudPaper Class="d-flex justify-center flex-grow-1" Elevation="0">
                <img class="cover align-items-end" src="@imgProfile" height="140" width="120" />
            </MudPaper>
        </MudPaper>
        <MudPaper Class="mx-4 pa-4" Elevation="0">
            <MudTable Items="@TimeList" HeaderClass="custom-table-header">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Level One Count</MudTh>
                    <MudTh>Level One Minute</MudTh>
                    <MudTh>Level Two Count</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.empl_name</MudTd>
                    <MudTd DataLabel="level1">@context.level_1_cnt</MudTd>
                    <MudTd DataLabel="level1_min">@context.level_1_minutesum</MudTd>
                    <MudTd DataLabel="level2">@context.level_2_cnt</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
        <MudPaper Class="mx-4 pa-4" Elevation="0">
            <MudTable Items="@TimeHistory" AllowUnsorted="false" HeaderClass="custom-table-header">
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeTimeHistoryDTO, object>(x=>x.date)">Date</MudTableSortLabel></MudTh>
                    <MudTh>In Out</MudTh>
                    <MudTh>Time</MudTh>
                    <MudTh>Level</MudTh>
                    <MudTh>Day Schedule</MudTh>
                    <MudTh>Reason</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.date</MudTd>
                    <MudTd DataLabel="Inout">@context.inout</MudTd>
                    <MudTd DataLabel="StartTime">@context.work_start_time</MudTd>
                    <MudTd DataLabel="Latelvl">@context.late_level</MudTd>
                    <MudTd DataLabel="Update">@context.update_type</MudTd>
                    <MudTd DataLabel="Reason">@context.reason_desc</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudContainer>
</MudContainer>

@code {
    // Make the first element from the api become default value
    private IEnumerable<ManagerEmployeeListDTO> selectedEmployees = new List<ManagerEmployeeListDTO>();
    private ManagerEmployeeListDTO employee { get; set; } = new ManagerEmployeeListDTO();
    private IReadOnlyList<ManagerEmployeeListDTO> employees = new List<ManagerEmployeeListDTO>();

    private IReadOnlyList<EmployeeTimeHistoryDTO> TimeHistory = new List<EmployeeTimeHistoryDTO>();
    private List<EmployeeTimeListDTO> TimeList { get; set; } = new List<EmployeeTimeListDTO>();
    private TimeAttendanceDTO employeeInfo = new TimeAttendanceDTO();


    private bool isProcessing = false;
    private string imgProfile = "images/group.png";

    // Breadcrumbs
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Manager", href: "/manager/home"),
        new BreadcrumbItem("Time & Attendance", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var managerEmpl = await AuthService.GetUserEmplCode();
        employees = await EmployeeInfoRequestService.GetManagerEmployeeList(managerEmpl);

    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (selectedValues.Count == 0)
        {
            return "No one selected";
        }
        else
        {
            return $"{selectedValues.Count} Employee{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
        }
    }

    private DateRange _dateRange = new DateRange(DateTime.Now.AddDays(-7).Date, DateTime.Now.Date);

    private async Task HandleInquiry()
    {
        isProcessing = true;
        employeeInfo.DateTo = _dateRange.End.Value;
        employeeInfo.DateFrom = _dateRange.Start.Value;
        TimeList = new List<EmployeeTimeListDTO>();
        if (selectedEmployees.Count() == 1)
        {
            employeeInfo.EmplCode = selectedEmployees.ElementAt(0).empl_code;
            TimeList.Add(await TimeAttendanceService.GetEmployeeTimeList(employeeInfo));
            TimeHistory = await TimeAttendanceService.GetHrEmployeeTimeHistory(employeeInfo);

            var imgProfileBase64 = await ImageService.GetProfileImage(employeeInfo.EmplCode);
            if (imgProfileBase64 != null)
            {
                imgProfile = string.Format("data:image/jpg;base64,{0}", imgProfileBase64);
            }
        }
        else
        {
            imgProfile = "images/group.png";
            TimeHistory = new List<EmployeeTimeHistoryDTO>();
            for (int i = 0; i < selectedEmployees.Count(); i++)
            {
                employeeInfo.EmplCode = selectedEmployees.ElementAt(i).empl_code;
                TimeList.Add(await TimeAttendanceService.GetEmployeeTimeList(employeeInfo));
            }
        }
        isProcessing = false;
        StateHasChanged();


    }


    private async Task submit()
    {
        HandleInquiry();
    }
}